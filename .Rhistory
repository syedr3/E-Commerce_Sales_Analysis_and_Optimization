# Function to plot Residuals vs Fitted and Q-Q Plot with model titles
plot_diagnostics <- function(model, model_name) {
par(mfrow = c(1, 2)) # Set up a 1x2 plotting layout
# Residuals vs Fitted
plot(model, which = 1, main = paste(model_name, "- Residuals vs Fitted"))
# Q-Q Plot
plot(model, which = 2, main = paste(model_name, "- Q-Q Plot"))
}
plot_diagnostics(poly_model, "Polynomial Model")
# Data pre-processing
main_data = read.csv("Amazon Sale Report.csv")
#names(main_data)
main_data = main_data[,c("Category","Size","Date","Status","Fulfilment","B2B","Qty","Amount","ship.service.level")] # Extracting relevant variables
main_data = na.omit(main_data) # Removing any rows with N/A
# Converting each column to its respective data type
main_data$Category = as.factor(main_data$Category)
main_data$Size = as.factor(main_data$Size)
main_data$Status = as.factor(main_data$Status)
main_data$Date = as.Date(main_data$Date, format = "%m-%d-%y")
main_data$Fulfilment = as.factor(main_data$Fulfilment)
main_data$B2B = as.factor(main_data$B2B)
main_data$ship.service.level = as.factor(main_data$ship.service.level)
main_data = main_data[complete.cases(main_data), ]  # This removes rows with any NA/NaN/Inf
additive_model = lm(Amount ~ ., data = main_data)
sqrt_model = lm(Amount ~ Category + Size + Date + Status + Fulfilment + B2B + sqrt(Qty) + ship.service.level, data = main_data)
poly_model = lm(Amount ~ Category + Size + Date + Status + Fulfilment + B2B + poly(Qty, 2) + ship.service.level, data = main_data)
hypothesis_1 = lm(Amount ~ Qty * Status + Category + Size + Fulfilment + B2B + ship.service.level, data = main_data) # Hypothesis: The relationship between Qty and sales (Amount) might vary based on the Status of the order (e.g., delivered, canceled).
hypothesis_2 = interaction_model_5 = lm(Amount ~ Qty + Category * B2B + Size + Status + Fulfilment + ship.service.level, data = main_data) # Hypothesis: The effect of the product Category on sales might differ between B2B and non-B2B transactions.
# Function to plot Residuals vs Fitted and Q-Q Plot with model titles
plot_diagnostics <- function(model, model_name) {
par(mfrow = c(1, 2)) # Set up a 1x2 plotting layout
# Residuals vs Fitted
plot(model, which = 1, main = paste(model_name, "- Residuals vs Fitted"))
# Q-Q Plot
plot(model, which = 2, main = paste(model_name, "- Q-Q Plot"))
}
plot_diagnostics(poly_model, "Polynomial Model")
# Data pre-processing
main_data = read.csv("Amazon Sale Report.csv")
#names(main_data)
main_data = main_data[,c("Category","Size","Date","Status","Fulfilment","B2B","Qty","Amount","ship.service.level")] # Extracting relevant variables
main_data = na.omit(main_data) # Removing any rows with N/A
# Converting each column to its respective data type
main_data$Category = as.factor(main_data$Category)
main_data$Size = as.factor(main_data$Size)
main_data$Status = as.factor(main_data$Status)
main_data$Date = as.Date(main_data$Date, format = "%m-%d-%y")
main_data$Fulfilment = as.factor(main_data$Fulfilment)
main_data$B2B = as.factor(main_data$B2B)
main_data$ship.service.level = as.factor(main_data$ship.service.level)
main_data = main_data[complete.cases(main_data), ]  # This removes rows with any NA/NaN/Inf
additive_model = lm(Amount ~ ., data = main_data)
sqrt_model = lm(Amount ~ Category + Size + Date + Status + Fulfilment + B2B + sqrt(Qty) + ship.service.level, data = main_data)
poly_model = lm(Amount ~ Category + Size + Date + Status + Fulfilment + B2B + poly(Qty, 2) + ship.service.level, data = main_data)
hypothesis_1 = lm(Amount ~ Qty * Status + Category + Size + Fulfilment + B2B + ship.service.level, data = main_data) # Hypothesis: The relationship between Qty and sales (Amount) might vary based on the Status of the order (e.g., delivered, canceled).
hypothesis_2 = interaction_model_5 = lm(Amount ~ Qty + Category * B2B + Size + Status + Fulfilment + ship.service.level, data = main_data) # Hypothesis: The effect of the product Category on sales might differ between B2B and non-B2B transactions.
# Function to plot Residuals vs Fitted and Q-Q Plot with model titles
plot_diagnostics <- function(model, model_name) {
par(mfrow = c(1, 2)) # Set up a 1x2 plotting layout
# Residuals vs Fitted
plot(model, which = 1, main = paste(model_name, "- Residuals vs Fitted"))
# Q-Q Plot
plot(model, which = 2, main = paste(model_name, "- Q-Q Plot"))
}
plot_diagnostics(poly_model, "Polynomial Model")
set.seed(22)
trn_idx = sample(1:nrow(main_data), 60000)
trn = main_data[trn_idx, ]
tst = main_data[-trn_idx, ]
train_test_rmse = function(model){
train_rmse = sqrt(mean(((trn$Amount - predict(model, trn)))^2))
test_rmse = sqrt(mean(((tst$Amount - predict(model, tst)))^2))
c(train_rmse,test_rmse)
}
# Create a data frame with RMSE for each model
model_names <- c("Hypothesis 1", "Hypothesis 2", "Square Root Model", "Polynomial Model", "Additive Model")
rmse_values <- sapply(list(hypothesis_1, hypothesis_2, sqrt_model, poly_model, additive_model), train_test_rmse)
# Convert the matrix to a data frame for better readability
rmse_df <- data.frame(
Model = model_names,
Train_RMSE = rmse_values[1, ],
Test_RMSE = rmse_values[2, ]
)
# View the data frame
print(rmse_df)
anova(additive_model, sqrt_model, poly_model, hypothesis_1, hypothesis_2)
get_loocv_rmse = function(model) {
sqrt(mean((resid(model) / (1 - hatvalues(model))) ^ 2))
}
get_loocv_rmse(additive_model)
get_loocv_rmse(sqrt_model)
get_loocv_rmse(poly_model)
get_loocv_rmse(hypothesis_1)
get_loocv_rmse(hypothesis_2)
